######## IC101 #########################################################
# Macro     - Description                                              #
# P         - PV_Prefix1                                               #
# R         - PV_Prefix2                                               #
# PORT      - Serial port name from asyn                               #
# SCANRATE  - Epics scan rates for daemon threads                      #
# CAP#NAME  - Name for capacitors                                      #
# CAP#VAL   - Value for capacitors                                     #
# CAP0_IMAX - Value for auto switch of capacitors                      #
########################################################################

# gerenral communication
record(stringin, "$(P)$(R):ERRORSTRING_STS") {
  field(DESC, "collect missmatch error answers")
  field(PINI, "NO")
}

record(stringout, "$(P)$(R):EXECSTRING_CMD") {
  field(DESC, "send an md to iocshell")
  field(PINI, "NO")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@IGeneral.proto execString() $(PORT)")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(bo, "$(P)$(R):COMSTAT") {
  field(DESC, "en-/disable communication")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(VAL, "1")
  field(ZNAM, "Disable")
  field(ZSV, "MINOR")
  field(ONAM, "Enable")
  field(OSV, "NO_ALARM")
}

record(fanout, "$(P)$(R):FAN0") {
  field(DESC, "Device adress and IDN start for init")
  field(PINI, "YES")
  field(LNK1, "$(P)$(R):DEVADDR_STS")
  field(LNK2, "$(P)$(R):IDN_STS")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(fanout, "$(P)$(R):FAN1") {
  field(SCAN, "$(SCANRATE_SLOW)")
  field(PINI, "YES")
  field(LNK1, "$(P)$(R):CALIBFAC_MON")
  field(LNK2, "$(P)$(R):STB_STS")
  field(LNK3, "$(P)$(R):ESR_STS")
  field(LNK4, "$(P)$(R):ESE_STS")
  field(LNK5, "$(P)$(R):OpCond_STS")
  field(LNK6, "$(P)$(R):QCond_STS")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(fanout, "$(P)$(R):FAN2") {
  field(SCAN, "$(SCANRATE_SLOW)")
  field(PINI, "YES")
  field(LNK1, "$(P)$(R):CAP_STS")
  field(LNK2, "$(P)$(R):RANGE_MON")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(stringin, "$(P)$(R):DEVADDR_STS") {
  field(DESC, "get the fibre optic address")
  field(DTYP, "stream")
  field(INP, "@IGeneral.proto getDeviceAddress() $(PORT) 0")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(seq, "$(P)$(R):INIT_SETUP") {
  field(DESC, "Configure for EPICS")
  field(DOL1, "$(P)$(R):PWD PP")
  field(DO1, "12345")
  field(DLY1, "0.0")
  field(DOL2, "$(P)$(R):TERMINALMODE_SP PP")
  field(DO2, "0")
  field(DLY2, "1.0")
  field(DOL3, "$(P)$(R):CHECKSUMMODE_SP PP")
  field(DO3, "0")
  field(DLY3, "2.0")
  field(DOL4, "$(P)$(R):EXECUTE_RESET PP")
  field(DO4, "0")
  field(DLY4, "3.0")
}

record(stringin, "$(P)$(R):IDN_STS") {
  field(DESC, "display the identification string")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@IGeneral.proto idn() $(PORT) 0")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(scalcout, "$(P)$(R):DEVICESTRING_MON") {
  field(DESC, "just the device string")
  field(DTYP, "Soft Channel")
  field(INAA, "$(P)$(R):IDN_STS CP")
  field(CALC, "AA['PYRTECHCO,I','-REV']")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(scalcout, "$(P)$(R):DEVICESTRING2_MON") {
  field(DESC, "just the device string")
  field(DTYP, "Soft Channel")
  field(INAA, "$(P)$(R):DEVICESTRING_MON.SVAL CP")
  field(CALC, "AA=='101'?1:(AA=='200'?2:(AA=='400'?3:(AA=='404'?4:0)))")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(calcout, "$(P)$(R):STB_STS") {
  field(DESC, "get the status byte (*STB?)")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto getStatusByte() $(PORT) 0")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(calcout, "$(P)$(R):ESR_STS") {
  field(DESC, "get the status byte (*ESR?)")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto getEventStatusRegister() $(PORT) 0")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(calcout, "$(P)$(R):ESE_STS") {
  field(DESC, "get the status enable byte (*ESE?)")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto getEventStatusEnRegister() $(PORT) 0")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(calcout, "$(P)$(R):OpCond_STS") {
  field(DESC, "getStatusOperCond")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto getStatusOperCond() $(PORT) 0")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(calcout, "$(P)$(R):QCond_STS") {
  field(DESC, "getStatusQuestCond")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto getStatusQuestCond() $(PORT) 0")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(stringin, "$(P)$(R):ACK_STS") {
  field(DESC, "collects the ACKs or NACKs")
  field(SCAN, "Passive")
}

record(stringin, "$(P)$(R):TERMINALMODE_STS") {
  field(DTYP, "stream")
  field(PINI, "YES")
  field(SCAN, "Passive")
  field(INP, "@IGeneral.proto getTerminalMode() $(PORT) 0")
}

record(bo, "$(P)$(R):TERMINALMODE_SP") {
  field(DESC, "en/disable Terminal Mode (0=ACK, 1='OK'")
  field(DTYP, "stream")
  field(PINI, "NO")
  field(SCAN, "Passive")
  field(OUT, "@IGeneral.proto setTerminalMode() $(PORT) 0")
  field(ZNAM, "ACK")
  field(ONAM, "'OK'")
  field(FLNK, "$(P)$(R):TERMINALMODE_STS")
}

record(stringin, "$(P)$(R):CHECKSUMMODE_STS") {
  field(DESC, "display the identification string")
  field(DTYP, "stream")
  field(PINI, "YES")
  field(SCAN, "Passive")
  field(INP, "@IGeneral.proto getChecksumMode() $(PORT) 0")
}

record(bo, "$(P)$(R):CHECKSUMMODE_SP") {
  field(DESC, "en/disable CHECKSUMMODE (0=dis, 1=en")
  field(DTYP, "stream")
  field(PINI, "NO")
  field(SCAN, "Passive")
  field(OUT, "@IGeneral.proto setChecksumMode() $(PORT) 0")
  field(ZNAM, "Without")
  field(ONAM, "With")
  field(FLNK, "$(P)$(R):CHECKSUMMODE_STS")
}


record(bo, "$(P)$(R):CAP_SP") {
  field(DESC, "Set Capacitor")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto setCap() $(PORT) 0")
  field(ZNAM, "$(CAP0NAME)")
  field(ONAM, "$(CAP1NAME)")
  field(FLNK, "$(P)$(R):CAP_STS")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(bi, "$(P)$(R):CAP_STS") {
  field(DESC, "Get Capacitance - Binary")
  field(DTYP, "stream")
  field(INP, "@IGeneral.proto getCap($(P)$(R):CAP_MON) $(PORT) 0")
  field(ZNAM, "$(CAP0NAME)")
  field(ONAM, "$(CAP1NAME)")
  field(FLNK, "$(P)$(R):RANGE_MON")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(ai, "$(P)$(R):CAP_MON") {
  field(DESC, "Capacitance As Float")
  field(PREC, "2")
  field(EGU, "F")
  field(VAL, "0")
  field(FLNK, "$(P)$(R):CHECK_CAP")
}

record(bo, "$(P)$(R):EXECUTE_CALIB") {
  field(DESC, "Calibrate device")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto doCalib() $(PORT) 0")
  field(VAL, "0")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(bo, "$(P)$(R):CALIB") {
  field(FLNK, "$(P)$(R):EXECUTE_CALIB")
  field(OUT, "$(P)$(R):EXECUTE_CALIB.DISA")
}

record(stringin, "$(P)$(R):CALIBFAC_MON") {
  field(DESC, "receive the calib factors")
  field(DTYP, "stream")
  field(INP, "@IGeneral.proto getCalib() $(PORT) 0")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(stringin, "$(P)$(R):FREQ_MON") {
  field(DESC, "receive setting for major noise freq")
  field(DTYP, "stream")
  field(PINI, "YES")
  field(INP, "@IGeneral.proto getFilterfreq() $(PORT) 0")
}

record(stringout, "$(P)$(R):FREQ_SP") {
  field(DESC, "set major noise freq 50hz/60hz")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto setFilterfreq($(P)$(R),ACK_STS) $(PORT) 0")
  field(FLNK, "$(P)$(R):FREQ_MON")
}

# CLR I400 only
record(bo, "$(P)$(R):CALIBCLR") {
  field(DESC, "reset Calibrate factors to 1")
  field(DTYP, "stream")
  field(OUT,  "@IGeneral.proto clearCalib() $(PORT) 0")
  field(FLNK, "$(P)$(R):CALIBFAC_MON_SEQ")
}

record(bo, "$(P)$(R):CALIBSAV") {
  field(DESC, "save calibration factors")
  field(DTYP, "stream")
  field(OUT,  "@IGeneral.proto savCalib() $(PORT) 0")
  field(FLNK, "$(P)$(R):CALIBFAC_MON_SEQ")
}

record(bo, "$(P)$(R):CALIBRCL") {
  field(DESC, "recall calibration factors")
  field(DTYP, "stream")
  field(OUT,  "@IGeneral.proto rclCalib() $(PORT) 0")
  field(FLNK, "$(P)$(R):CALIBFAC_MON_SEQ")
}

record(seq, "$(P)$(R):CALIBFAC_MON_SEQ") {
  field(DESC, "Delay to prevent busy error")
  field(DLY1, "0.5")
  field(LNK1, "$(P)$(R):CALIBFAC_MON")
}

record(mbbo, "$(P)$(R):TESTCALIB_SP") {
  field(DESC, "enable internal 500nA on ch 1-4?")
  field(VAL, "0")
  field(ZRST, "Off")
  field(ONST, "on")
  field(DTYP, "stream")
  field(OUT,  "@IGeneral.proto testCalib() $(PORT) 0")
}

#Device Reset

record(bo, "$(P)$(R):RESET") {
  field(DESC, "Init of Reset sequence")
  field(FLNK, "$(P)$(R):RESET_SEQ")
  field(OUT, "$(P)$(R):RESET_SEQ.DISA")
}

record(seq, "$(P)$(R):RESET_SEQ") {
  field(DLY1, "0.0")
  field(LNK1, "$(P)$(R):EXECUTE_SAVE PP")
  field(DLY2, "3.0")
  field(LNK2, "$(P)$(R):EXECUTE_RESET PP")
  field(DLY3, "4.0")
  field(LNK3, "$(P)$(R):EXECUTE_RECALL PP")
  field(DLY4, "2.0")
  field(LNK4, "$(P)$(R):EXECUTE_INIT PP")
}

record(bo, "$(P)$(R):EXECUTE_SAVE") {
  field(DESC, "SAVE STATE TO EEPROM")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto save() $(PORT) 0")
}

record(bo, "$(P)$(R):EXECUTE_RESET") {
  field(DESC, "Reset device")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto reset() $(PORT) 0")
}

record(bo, "$(P)$(R):EXECUTE_RECALL") {
  field(DESC, "RECALL STATE FROM EEPROM")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto recall() $(PORT) 0")
}

record(bo, "$(P)$(R):EXECUTE_INIT") {
  field(DESC, "INITIATE ON VALID TRIGGER")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto init() $(PORT) 0")
}

## Range Block
record(mbbo, "$(P)$(R):RANGE") {
  field(VAL, "10")
  field(ZRST, "1.0e-13")
  field(ONST, "1.0e-12")
  field(TWST, "1.0e-11")
  field(THST, "1.0e-10")
  field(FRST, "1.0e-09")
  field(FVST, "1.0e-08")
  field(SXST, "1.0e-07")
  field(SVST, "1.0e-06")
  field(EIST, "1.0e-05")
  field(NIST, "1.0e-04")
  field(TEST, "1.0e-03")
  field(FLNK, "$(P)$(R):RANGE_SP")
  field(DESC, "SELECTION OF CURRENT RANGES")
}

record(mbbo, "$(P)$(R):RANGE_BP") {
  field(VAL, "10")
  field(ZRST, "1.0e-13")
  field(ONST, "1.0e-12")
  field(TWST, "1.0e-11")
  field(THST, "1.0e-10")
  field(FRST, "1.0e-09")
  field(FVST, "1.0e-08")
  field(SXST, "1.0e-07")
  field(SVST, "1.0e-06")
  field(EIST, "1.0e-05")
  field(NIST, "1.0e-04")
  field(TEST, "1.0e-03")
  field(FLNK, "$(P)$(R):RANGE_SP_BP")
  field(DESC, "SELECTION OF CURRENT RANGES")
}

record(ai, "$(P)$(R):RANGE_MON") {
  field(DESC, "GET CURRENT RANGE FROM I4xx")
  field(DTYP, "stream")
  field(VAL, "0")
  field(INP, "@IC101.proto getRange() $(PORT) 0")
  field(SCAN, "Passive")
  field(EGU, "A")
}

record(ao, "$(P)$(R):CAP_SWITCH_SP") {
  field(DESC, "CAPACITANCE SWITCH POINT")
  field(PINI, "YES")
  field(VAL, "$(CAP0_IMAX)")
}

record(calcout, "$(P)$(R):CHECK_CAP") {
  field(PINI, "YES")
  field(CALC, "(C>=B&&A=$(CAP1VAL))||(C<B&&A=$(CAP0VAL))?C:-1")
  field(INPA, "$(P)$(R):CAP_MON")
  field(INPB, "$(P)$(R):CAP_SWITCH_SP")
  field(INPC, "$(P)$(R):RANGE_SP PP")
  field(OUT, "$(P)$(R):DFAN1 PP")
  field(DESC, "CHECK CAPACITANCE VALID")
}

record(bi, "$(P)$(R):SET_RANGE") {
  field(SCAN, "Passive")
  field(FLNK, "$(P)$(R):FAN4")
}

record(stringin, "$(P)$(R):RANGE_SP") {
  field(SCAN, "Passive")
  field(FLNK, "$(P)$(R):CHECK_CAP")
  field(INP, "$(P)$(R):RANGE.VAL")
  field(DESC, "REQUESTED RANGE AS VALUE")
}

record(stringout, "$(P)$(R):RANGE_SP_BP") {
  field(SCAN, "Passive")
  field(OMSL, "closed_loop")
  field(OUT, "$(P)$(R):EXECSR.VAL PP")
  field(DOL, "$(P)$(R):RANGE_BP.VAL")
  field(DESC, "REQUESTED RANGE AS NUMERIC VALUE")
}

record(dfanout, "$(P)$(R):DFAN1") {
  field(SCAN, "Passive")
  field(OUTA, "$(P)$(R):DISSR.A PP")
  field(OUTB, "$(P)$(R):EXECSR.VAL")
}

record(calcout, "$(P)$(R):DISSR") {
  field(DESC, "DISABLE SET RANGE")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(VAL, "0")
  field(CALC, "A>=0?0:1")
  field(OUT, "$(P)$(R):DFAN2 PP")
}

record(fanout, "$(P)$(R):FAN4") {
  field(LNK1, "$(P)$(R):EXECSR")
  field(LNK2, "$(P)$(R):RANGE_MON")
}

record(stringin, "$(P)$(R):RANGE_MESSAGE1") {
  field(VAL, "Capacitance ")
}

record(bo, "$(P)$(R):RANGE_MESSAGE2") {
  field(DESC, "VALID/INVALID MESAGE")
  field(SCAN, "Passive")
  field(ZNAM, "VALID")
  field(ONAM, "INVALID")	
}

record(stringin, "$(P)$(R):RANGE_MESSAGE3") {
  field(VAL, " for selected current range")
}

record(dfanout, "$(P)$(R):DFAN2") {
  field(SCAN, "Passive")
  field(OUTA, "$(P)$(R):RANGE_MESSAGE2 PP")
  field(OUTB, "$(P)$(R):SET_RANGE.DISA")
}

record(ao, "$(P)$(R):EXECSR") {
  field(SCAN, "Passive")
  field(DTYP, "stream")
  field(OUT, "@IC101.proto setRange() $(PORT) 0")
  field(DESC, "EXECUTE: SET CURRENT RANGE")
  field(FLNK, "$(P)$(R):CAP_STS")
}

record(stringout, "$(P)$(R):PWD") {
  field(DESC, "Admin Mode")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto sendPassword() $(PORT) 0")
  field(VAL, "12345")
}

record(stringout, "$(P)$(R):PASSWORD_SP") {
  field(DESC, "STORE AND SET PASSWORD")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto sendPassword() $(PORT) 0")
  field(FLNK, "$(P)$(R):PASSWORD_MON")
}

record(stringin, "$(P)$(R):PASSWORD_MON") {
  field(PINI, "YES")
  field(DESC, "Receives current Pass if Pass was right")
  field(DTYP, "stream")
  field(INP, "@IGeneral.proto getPassword() $(PORT) 0")
  field(FLNK, "$(P)$(R):PASSWORD_STS")
}

record(bi, "$(P)$(R):PASSWORD_STS") {
  field(DESC, "check if device is protected")
  field(INP, "$(P)$(R):PASSWORD_MON CP")
  field(ZNAM, "Protected")
  field(ONAM, "Configurable")
  field(VAL, "0")
}

### Error section

record(bo, "$(P)$(R):STS") {
  field(DESC, "ERROR STATUS")
  field(SCAN, "Passive")
  field(OUT, "$(P)$(R):ENBERR.B PP")
  field(ZNAM, "Ok")
  field(ONAM, "Error")
  field(VAL, "0")
}

record(bo, "$(P)$(R):CLRERR") {
  field(DESC, "reset error status")
  field(OUT, "$(P)$(R):ENBERR1 PP")
  field(DESC, "CLEAR ERROR STATUS")
  field(SCAN, "Passive")
}

record(bo, "$(P)$(R):ENBERR1") {
  field(DOL, "0")
  field(OUT, "$(P)$(R):ERR.DISA")
}

record(calcout, "$(P)$(R):ENBERR") {
  field(SCAN, "Passive")
  field(CALC, "B=1&&A=0||C=1?1:0")
#C override error checking, B= current error status yes|NO, A=CHECKERRR (!no error !''||OVR_sTS
  field(OUT, "$(P)$(R):ERR.DISA PP")
  field(DESC, "ENABLE GETTING ERRORS")
}

record(calcout, "$(P)$(R):ERRBIN") {
  field(DESC, "ERROR STATUS TO BINARY")
  field(SCAN, "Passive")
  field(CALC, "A=0?0:1")
  field(OUT, "$(P)$(R):STS.VAL PP")
  field(VAL, "0")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(scalcout, "$(P)$(R):CHKERR") {
  field(DESC, "check OVR,Err and err=empty")
  field(DTYP, "Soft Channel")
  field(CALC, "AA!='No error'&&AA!=''||BB!=0")
  field(OUT, "$(P)$(R):ERRBIN.A PP")
  field(INAA, "$(P)$(R):ERR.VAL")
  field(INBB, "$(P)$(R):OVR_STS.RVAL CP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(stringin, "$(P)$(R):ERR") {
  field(DESC, "ERROR MESSAGE FROM IC101")
  field(SCAN, "$(SCANRATE_SLOW)")
  field(DTYP, "stream")
  field(INP, "@IGeneral.proto getErr() $(PORT) 0")
  field(FLNK, "$(P)$(R):CHKERR")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(bo, "$(P)$(R):OVRERR") {
  field(DESC, "OVERRIDE ERROR CHECKING")
  field(PINI, "YES")
  field(VAL, "0")
  field(OUT, "$(P)$(R):ENBERR.C PP")
  field(ZNAM, "Disable Error")
  field(ONAM, "Enable Error")
}

record(seq, "$(P)$(R):INIT") {
  field(DESC, "PERFORM INITIALISATION")
  field(PINI, "YES")
  field(LNK1, "$(P)$(R):DISBERR.PROC")
  field(LNK2, "$(P)$(R):HVERR.PROC")
  field(LNK3, "$(P)$(R):ENBERR.PROC")
  field(DLY3, "1")
}

record(stringin, "$(P)$(R):HVERR") {
  field(DESC, "ERROR MESSAGE FROM HV CHECK")
  field(SCAN, "Passive")
  field(DTYP, "stream")
  field(INP, "@IGeneral.proto getErr() $(PORT) 0")
}

record(bo, "$(P)$(R):OUT1") {
  field(SCAN, "Passive")
  field(VAL, "1")
  field(OUT, "$(P)$(R):ERR.DISA")
  field(DESC, "OUTPUT 1")
}

record(bo, "$(P)$(R):OUT0") {
  field(SCAN, "Passive")
  field(VAL, "0")
  field(OUT, "$(P)$(R):ERR.DISA")
  field(DESC, "OUTPUT 0")
}

record(ai, "$(P)$(R):SCALEFACTOR_SP") {
  field(PREC, "3")
  field(VAL, "1")
  field(PINI, "YES")
}

#Read digitals
#bit0 = measuring
#bit1 = waiting trigger
#bit2 = calibrated
#bit3 = HV enabled
#bit4 = external gate present
record(mbbiDirect, "$(P)$(R):DIGI_MON") {
  field(DESC, "read digital inputs on device")
  field(DTYP, "stream")
  field(INP, "@IGeneral.proto readDigital() $(PORT) 0")
  field(SCAN, "$(SCANRATE_FAST)")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(bi, "$(P)$(R):MEAS_STS") {
  field(DESC, "bit2 (0x04) = calibrated")
  field(DTYP, "Soft Channel")
  field(INP, "$(P)$(R):DIGI_MON.B0 CP MS")
#bit0-->0x01
  field(ZNAM, "stby")
  field(ONAM, "measuring...")
  field(SCAN, "Passive")
}

record(bi, "$(P)$(R):TRG_STS") {
  field(DESC, "bit2 (0x04) = calibrated")
  field(DTYP, "Soft Channel")
  field(INP, "$(P)$(R):DIGI_MON.B1 CP MS")
#bit1-->0x02
  field(ZNAM, "not waiting")
  field(ONAM, "waiting for trigger")
  field(SCAN, "Passive")
}

record(bi, "$(P)$(R):CALIB_STS") {
  field(DESC, "bit2 (0x04) = calibrated")
  field(DTYP, "Soft Channel")
  field(INP, "$(P)$(R):DIGI_MON.B2 CP MS")
#bit2-->0x04
  field(ZNAM, "not calibrated")
  field(ONAM, "calibrated")
  field(ZSV, "MINOR")
  field(OSV, "NO_ALARM")
  field(SCAN, "Passive")
}

record(bi, "$(P)$(R):HVENA_STS") {
  field(DESC, "bit3 (0x08) = HV enabled")
  field(DTYP, "Soft Channel")
  field(INP, "$(P)$(R):DIGI_MON.B3 CP MS")
#bit3-->0x08
  field(ZNAM, "High Voltage - DISABLED")
  field(ONAM, "High Voltage - ENABLED")
  field(ZSV, "NO_ALARM")
  field(OSV, "MINOR")
  field(SCAN, "Passive")
}

record(bi, "$(P)$(R):EGATE_STS") {
  field(DESC, "bit3 (0x08) = HV enabled")
  field(DTYP, "Soft Channel")
  field(INP, "$(P)$(R):DIGI_MON.B4 CP MS")
#bit4-->0x16
  field(ZNAM, "Ext. Gate - not present")
  field(ONAM, "Ext. Gate - present")
  field(SCAN, "Passive")
}

record(mbbi, "$(P)$(R):OVR_STS") {
  field(DESC, "overrange byte/bit")
  field(ZRST, "In Range")
  field(ONST, "Over Range ch1")
  field(TWST, "Over Range ch2")
  field(THST, "Over Range ch3")
  field(FRST, "Over Range ch4")
  field(ZRSV, "NO_ALARM")
  field(ONSV, "MAJOR")
  field(TWSV, "MAJOR")
  field(THSV, "MAJOR")
  field(FRSV, "MAJOR")
}

record(ao, "$(P)$(R):PERIOD_SP") {
  field(DESC, "set integration/periode time")
  field(PINI, "NO")
  field(DTYP, "stream")
#  field(VAL, "0")
  field(OUT, "@IC101.proto setPeriod() $(PORT) 0")
  field(SCAN, "Passive")
  field(FLNK, "$(P)$(R):PERIOD_MON")
  field(DRVH, "10")
  field(HOPR, "10")
}

record(ai, "$(P)$(R):PERIOD_MON") {
  field(DESC, "readout setted integration time")
  field(DTYP, "stream")
#  field(VAL, "0")
  field(INP, "@IC101.proto getPeriod() $(PORT) 0")
  field(SCAN, "Passive")
  field(HOPR, "10")
}

record(ai, "$(P)$(R):ITIME_MON") {
  field(DESC, "integration time last measurement")
  field(HOPR, "10")
  field(PREC, "2")
}

##Current block
#trigger get currents starting witch channel1
record(bi, "$(P)$(R):GETCS") {
  field(DESC, "main readout triggerrecord")
  field(FLNK, "$(P)$(R):I1_MON")
}

#$1=Dev $2=time $3=OVR $4-$6=Current Monitor 2-4
record(ai, "$(P)$(R):I1_MON") {
  field(DESC, "main data readout (CURRENTS,OVR,...)")
  #field(PREC, "4")
  field(DTYP, "stream")
  field(INP, "@IC101.proto readCurrents($(P)$(R),ITIME_MON,OVR_STS) $(PORT) 0")
  field(SCAN, "Passive")
  field(FLNK, "$(P)$(R):ICCALC1")
}

record(mbbi, "$(P)$(R):CSWITCH") {
  field(ZRST, "ONE")
  field(ONST, "TWO")
  field(TWST, "THREE")
  field(THST, "FOUR")
}

record(calcout, "$(P)$(R):ICCALC1") {
  field(CALC, "A*B")
  field(EGU, "B")
  field(INPA, "$(P)$(R):I1_MON")
  field(INPB, "$(P)$(R):SCALEFACTOR_SP")
  field(OUT, "$(P)$(R):IC1_MON PP")
  field(OOPT, "Every Time")
}

record(ai, "$(P)$(R):IC1_MON") {
  field(DESC, "PV read by BeamPosition db")
  field(SCAN, "Passive")
}

record(bo, "$(P)$(R):ENABLE_IC_UPDATES") {
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(VAL, "1")
  field(OUT, "$(P)$(R):GETCS2.DISA")
  field(ZNAM, "Enabled")
  field(ONAM, "Disabled")
}

record(bi, "$(P)$(R):GETCS2") {
  field(DESC, "main readout triggerrecord")
  field(FLNK, "$(P)$(R):FAN3")
  #field(SCAN, "$(SCANRATE_FAST)")
  field(SCAN, "Passive")
}

record(fanout, "$(P)$(R):FAN3") {
  field(LNK1, "$(P)$(R):I1_MON")
  field(LNK2, "$(P)$(R):INCREMENT_XAXIS2")
  field(LNK3, "$(P)$(R):OSCILLATOR2")
}

record(calcout, "$(P)$(R):INCREMENT_XAXIS2") {
  field(SCAN, "Passive")
  field(CALC, "B=1?-2:A+1")
  field(OUT, "$(P)$(R):XAXIS2.VAL PP")
  field(OOPT, "Every Time")
}

record(ao, "$(P)$(R):XAXIS2") {
  field(SCAN, "Passive")
  field(VAL, "-1")
  field(DESC, "GRAPH X AXIS")
  field(PINI, "YES")
  field(OUT, "$(P)$(R):INCREMENT_XAXIS2.A")
}

record(bo, "$(P)$(R):RESET_PLOT2") {
  field(OUT, "$(P)$(R):INCREMENT_XAXIS2.B PP")
  field(DESC, "RESET THE GRAPH X AXIS")
}

record(bo, "$(P)$(R):TRIGGER2") {
  field(DESC, "TRIGGER PV FOR GRAPH")
  field(OUT, "$(P)$(R):OSCILLATOR2.A")
}

record(calcout, "$(P)$(R):OSCILLATOR2") {
  field(DESC, "OSCILLATE THE TRIGGER VALUE")
  field(SCAN, "Passive")
  field(CALC, "!A")
  field(OUT, "$(P)$(R):TRIGGER2.VAL PP")
  field(OOPT, "Every Time")
}

record(ao, "$(P)$(R):HV_SP") {
  field(FLNK, "$(P)$(R):HVSEQ1")
  field(OUT, "$(P)$(R):HV2 NPP")
}

record(stringin, "$(P)$(R):ACK") {
}

record(ao, "$(P)$(R):HV2") {
  field(DTYP, "stream")
  field(OUT, "@IC101.proto setHV() $(PORT) 0")
}

record(ai, "$(P)$(R):HVIN_MON") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@IC101.proto getHV() $(PORT) 0")
  field(EGU, "Volts")
}

record(ao, "$(P)$(R):HVMAX_SP") {
  field(DESC, "Setting HVMAX via opi")
  field(FLNK, "$(P)$(R):HVMSEQ")
  field(OUT, "$(P)$(R):HVMAX2_SP.VAL")
  field(EGU, "Volts")
}

record(seq, "$(P)$(R):HVMSEQ") {
  field(DESC, "NEED TO WAIT FOR HIVO")
  field(SCAN, "Passive")
  field(LNK1, "$(P)$(R):HVMAX2_SP.PROC")
  field(LNK2, "$(P)$(R):HVMAX_MON.PROC")
  field(DLY2, "1")
}

record(ao, "$(P)$(R):HVMAX2_SP") {
  field(DESC, "send HIVOMAX command")
  field(DTYP, "stream")
  field(OUT, "@IC101.proto setHVMax() $(PORT) 0")
  field(EGU, "Volts")
}

record(ai, "$(P)$(R):HVMAX_MON") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@IC101.proto getHVMax() $(PORT) 0")
  field(EGU, "Volts")
}

record(bo, "$(P)$(R):HVACTIVE") {
  field(ONAM, " ")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(VAL, "1")
  field(ZNAM, "Setting HV")
}

record(seq, "$(P)$(R):HVSEQ1") {
  field(DESC, "NEED TO WAIT FOR HIVO")
  field(SCAN, "Passive")
  field(LNK2, "$(P)$(R):ENBHVRCHK.PROC")
  field(LNK1, "$(P)$(R):DSBERR.PROC")
  field(LNK3, "$(P)$(R):HV2.PROC")
  field(LNK4, "$(P)$(R):ERR.PROC")
  field(LNK5, "$(P)$(R):HVIN_MON.PROC")
  field(DLY5, "2")
}

record(bo, "$(P)$(R):EXECUTE_CLEAR") {
  field(DESC, "CLEAR REGISTERS AND MESSAGES")
  field(DTYP, "stream")
  field(OUT, "@IGeneral.proto clear() $(PORT) 0")
}

record(dfanout, "$(P)$(R):FANOUT1") {
  field(SCAN, "Passive")
  field(OUTA, "$(P)$(R):HVRCHK.DISA")
  field(OUTB, "$(P)$(R):HVACTIVE PP")
}

record(bo, "$(P)$(R):DSBERR") {
  field(DOL, "1")
  field(OUT, "$(P)$(R):ERR.DISA")
}

record(seq, "$(P)$(R):HVSEQ2") {
  field(LNK1, "$(P)$(R):DSBHVRCHK.PROC")
  field(LNK2, "$(P)$(R):EXECUTE_CLEAR.PROC")
  field(LNK3, "$(P)$(R):ENBERR1.PROC")
  field(LNK4, "$(P)$(R):HVIN_MON.PROC")
}

record(calcout, "$(P)$(R):WAIT4HIVO") {
  field(OOPT, "When Non-zero")
  field(SCAN, "Passive")
  field(CALC, "A")
  field(INPA, "$(P)$(R):HVRCHK.VAL")
  field(OUT, "$(P)$(R):HVSEQ2.PROC")
}

record(bi, "$(P)$(R):HVRCHK") {
  field(DESC, "Check for HVErr")
#  field(SCAN, "$(SCANRATE_FAST)")
  field(SCAN, "Passive")
  field(DTYP, "stream")
  field(FLNK, "$(P)$(R):WAIT4HIVO")
  field(INP, "@IC101.proto checkHV() $(PORT) 0")
  field(ZNAM, "SETTING HIVO")
  field(ONAM, "HIVO IDLE")
  field(DISV, "0")
  field(SDIS, "$(P)$(R):COMSTAT")
}

record(bo, "$(P)$(R):DSBHVRCHK") {
  field(PINI, "YES")
  field(DOL, "1")
  field(OUT, "$(P)$(R):FANOUT1.VAL PP")
  field(SCAN, "Passive")
}

record(bo, "$(P)$(R):ENBHVRCHK") {
  field(DOL, "0")
  field(OUT, "$(P)$(R):FANOUT1.VAL PP")
}
